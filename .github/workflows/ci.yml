name: ci
on:
  push:
  pull_request:
  schedule:
    - cron: '0 2 * * *'  # Run nightly at 2 AM UTC
jobs:
  node:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with: { version: 9 }
      - uses: actions/setup-node@v4
        with: { node-version: 20, cache: 'pnpm' }
      - run: pnpm install
      - run: pnpm typecheck && pnpm lint && pnpm build && pnpm test
  python:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - run: pipx install ruff && pip install -r requirements.txt || true
      - run: ruff check . --fix || true
      - run: pytest -q || true
  go:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: services/orchestrator-go
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: true
      - name: Tidy modules
        run: go mod tidy
      - name: Vet
        run: go vet ./...
      - name: Test
        run: go test ./... -count=1
  e2e:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with: { version: 9 }
      - uses: actions/setup-node@v4
        with: { node-version: 20, cache: 'pnpm' }
      - run: pnpm install
      - run: npx playwright install --with-deps
      - run: E2E_GREP='\[stable\]' ARGUS_BLOCK_RESOURCES=1 pnpm -C apps/e2e test
      - uses: actions/upload-artifact@v4
        with: { name: e2e-stable-report, path: apps/e2e/reports/results.json, if-no-files-found: ignore }
      - name: Enforce perf budget
        run: |
          FILE=apps/e2e/metrics/real.json
          open=$(node -e "console.log(require('./'+process.argv[1]).open)" $FILE || echo 0)
          pane=$(node -e "console.log(require('./'+process.argv[1]).pane)" $FILE || echo 0)
          [ "$open" != "0" ] && [ "$open" -lt 3500 ] || (echo "open p95 fail: $open"; exit 1)
          [ "$pane" != "0" ] && [ "$pane" -lt 3500 ] || (echo "pane p95 fail: $pane"; exit 1)
  e2e-nightly:
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with: { version: 9 }
      - uses: actions/setup-node@v4
        with: { node-version: 20, cache: 'pnpm' }
      - run: pnpm install
      - run: npx playwright install --with-deps
      - run: E2E_GREP='' ARGUS_BLOCK_RESOURCES=1 pnpm -C apps/e2e test
      - run: pnpm run e2e:triage
      - name: Commit tag updates if any
        if: failure()  # exit code 2 from triage marks "changes"
        run: |
          git config user.name "argus-bot"
          git config user.email "argus-bot@users.noreply.github.com"
          git add apps/e2e/tests/*.spec.ts apps/e2e/reports/history.json
          git commit -m "chore(e2e): auto-triage tags"
          git push || true
      - uses: actions/upload-artifact@v4
        with: { name: e2e-full-report, path: apps/e2e/reports/results.json, if-no-files-found: ignore }
  crawlee-smoke:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with: { version: 9 }
      - uses: actions/setup-node@v4
        with: { node-version: 20, cache: 'pnpm' }
      - run: pnpm install
      - run: npx playwright install --with-deps
      - run: CRAWLEE_STORAGE_DIR=apps/scraper-playwright/datasets ARGUS_BLOCK_RESOURCES=1 ARGUS_TEST_URL="https://maps.app.goo.gl/q6Rus1W5HMFsHBb3A" pnpm -C libs/runner-crawlee start
      - name: Assert dataset exists
        run: test -d apps/scraper-playwright/datasets/datasets/default
  budgets:
    runs-on: ubuntu-latest
    needs: [e2e, crawlee-smoke]
    steps:
      - uses: actions/checkout@v4
      - run: echo "Enforce dupRate < 1% via test; perf enforced in e2e job."
  unit-and-coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with: { version: 9 }
      - uses: actions/setup-node@v4
        with: { node-version: 20, cache: 'pnpm' }
      - run: pnpm install
      - run: pnpm run coverage
  quality-scans:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with: { version: 9 }
      - uses: actions/setup-node@v4
        with: { node-version: 20, cache: 'pnpm' }
      - run: pnpm install
      - run: pnpm run deadcode
      - run: pnpm run deps:unused
      - run: pnpm run audit
      - run: pnpm run licenses
  qa-strict:
    runs-on: ubuntu-latest
    needs: [unit-and-coverage, quality-scans, e2e, crawlee-smoke, budgets]
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with: { version: 9 }
      - uses: actions/setup-node@v4
        with: { node-version: 20, cache: 'pnpm' }
      - run: pnpm install
      - run: pnpm run qa:strict
  data-quality:
    runs-on: ubuntu-latest
    needs: [e2e, crawlee-smoke, budgets]
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with: { version: 9 }
      - uses: actions/setup-node@v4
        with: { node-version: 20, cache: 'pnpm' }
      - run: pnpm install
      - run: ARGUS_REDACT_PII=1 pnpm run data:quality
      - uses: actions/upload-artifact@v4
        with: { name: data-quality-report, path: DATA_QUALITY_REPORT.md, if-no-files-found: error }
  data-export:
    runs-on: ubuntu-latest
    needs: [data-quality]
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with: { version: 9 }
      - uses: actions/setup-node@v4
        with: { node-version: 20, cache: 'pnpm' }
      - run: pnpm install
      - run: ARGUS_FAIL_ON_PII=1 ARGUS_REDACT_PII=1 pnpm run data:export:safe
      - uses: actions/upload-artifact@v4
        with: { name: reviews-safe-jsonl, path: export/reviews.safe.jsonl, if-no-files-found: error }
  lockfile:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with: { version: 9 }
      - uses: actions/setup-node@v4
        with: { node-version: 20, cache: 'pnpm' }
      - run: pnpm install --frozen-lockfile

  sbom-and-schema:
    runs-on: ubuntu-latest
    needs: [e2e, data-quality]
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with: { version: 9 }
      - uses: actions/setup-node@v4
        with: { node-version: 20, cache: 'pnpm' }
      - run: pnpm install
      - run: pnpm run sbom:workspaces
      - run: pnpm run sbom:assert
      - run: pnpm run schema:export
      - uses: actions/upload-artifact@v4
        with: { name: sbom-per-workspace, path: sbom/*.cdx.json, if-no-files-found: error }
      - uses: actions/upload-artifact@v4
        with: { name: sbom-combined, path: sbom/combined.cdx.json, if-no-files-found: error }
      - uses: actions/upload-artifact@v4
        with: { name: review-jsonschema, path: schemas/review.schema.json, if-no-files-found: error }

  provenance:
    runs-on: ubuntu-latest
    needs: [sbom-and-schema]
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with: { version: 9 }
      - uses: actions/setup-node@v4
        with: { node-version: 20, cache: 'pnpm' }
      - run: pnpm install
      - run: pnpm -r run build
      - run: pnpm run data:export:safe || true
      - run: pnpm run provenance:make
      - uses: actions/upload-artifact@v4
        with: { name: provenance, path: PROVENANCE.json, if-no-files-found: error }
